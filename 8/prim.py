'''
https://www.acmicpc.net/problem/1197
백준 1197 최소 스패닝 트리 문제

문제 선택이유
8월 28일 시험 치기 전 개념정리 도중 프림알고리즘가 혼동되어 
코딩해보며 개념을 확실히 잡아보고 싶어 선택하게되었습니다.

3 3
1 2 1
2 3 2
1 3 3

문제설명
그래프가 주어졌을 때, 그 그래프의 최소 스패닝 트리를 구하는 프로그램을 작성하시오.
첫째 줄에 정점의 개수 V(1 ≤ V ≤ 10,000)와 간선의 개수 E(1 ≤ E ≤ 100,000)가 주어진다. 
다음 E개의 줄에는 각 간선에 대한 정보를 나타내는 세 정수 A, B, C가 주어진다. 
이는 A번 정점과 B번 정점이 가중치 C인 간선으로 연결되어 있다는 의미이다. 
C는 음수일 수도 있으며, 절댓값이 1,000,000을 넘지 않는다.
그래프의 정점은 1번부터 V번까지 번호가 매겨져 있고, 임의의 두 정점 사이에 경로가 있다. 
최소 스패닝 트리의 가중치가 -2,147,483,648보다 크거나 같고, 2,147,483,647보다 작거나 같은 데이터만 입력으로 주어진다.

첫째 줄에 최소 스패닝 트리의 가중치를 출력한다.
'''
import heapq

# 정점 간선 개수 입력받음
V, E = map(int, input().split())

# 방문확인용 리스트 초기화
visited = [False]*(V+1)

Elist = [[] for _ in range(V+1)]

# 초기값 넣어 초기화
heap = [[0, 1]]

for _ in range(E):
    
    # 시작점 끝점 가중치
    s, e, w = map(int, input().split())
    # 무방향 그래프라 두곳 모두 추가
    Elist[s].append([w, e])
    Elist[e].append([w, s])

answer = 0
cnt = 0

while heap:
    # 정점과 같으면 끝
    if cnt == V:
        break
    
    w, s = heapq.heappop(heap)
    
    # 이미방문한곳이면 지나침
    if not visited[s]:
        # 방문처리
        visited[s] = True
        
        # 가중치 합산
        answer += w
        
        # 방문한 정점 수 증가
        cnt += 1
        
        # 해당 정점의 간선정보 불러옴
        for i in Elist[s]:
            heapq.heappush(heap, i)
 
print(answer)

'''
느낀점
사이클이 형성되는지 확인안해도 방문하고 안하고로 처리할 수 있어서 편했다.
크루스칼은 간선중심같고 프림은 정점중심 알고리즘인것 같다.
간선이 많으면 프림을 사용하면 좋을것 같다.
'''